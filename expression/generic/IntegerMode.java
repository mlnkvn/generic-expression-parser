package expression.generic;import expression.exceptions.OverflowException;import java.util.Objects;public class IntegerMode implements NumberMode<Integer> {    @Override    public Integer parse(String string) {        return Integer.parseInt(string);    }    @Override    public Integer add(Integer a, Integer b) {        if (a + b <= 0 && a > 0 && b > 0 || a + b >= 0 && a < 0 && b < 0) {            throw new OverflowException("overflow");        }        return a + b;    }    @Override    public Integer subtract(Integer a, Integer b) {        if (a - b <= 0 && a > b || a - b >= 0 && a < b) {            throw new OverflowException("overflow");        }        return a - b;    }    @Override    public Integer multiply(Integer a, Integer b) {        if (a != 0 && b != 0 && ((a * b) / a != b || (a * b) / b != a)) {            throw new OverflowException("overflow");        }        return a * b;    }    @Override    public Integer divide(Integer a, Integer b) {        if (b == 0) {            throw new ArithmeticException("division by zero");        }        if (a == Integer.MIN_VALUE && b == -1) {            throw new OverflowException("overflow");        }        return a / b;    }    @Override    public Integer min(Integer a, Integer b) {        return Integer.min(a, b);    }    @Override    public Integer max(Integer a, Integer b) {        return Integer.max(a, b);    }    @Override    public Integer negate(Integer a) {        if (a == Integer.MIN_VALUE) {            throw new OverflowException("overflow");        }        return -a;    }    @Override    public int intValue(Integer a) {        return a;    }    @Override    public boolean compare(Integer a, Integer b) {        return Objects.equals(a, b);    }    @Override    public Integer count(Integer a) {        return Integer.bitCount(a);    }}