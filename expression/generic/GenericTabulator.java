package expression.generic;import expression.exceptions.*;import expression.parser.GenericExpressionParser;import java.util.Map;public class GenericTabulator implements Tabulator {    private final static Map<String, NumberMode<?>> MODES = Map.of(            "i", new IntegerMode(),            "d", new DoubleMode(),            "bi", new BigIntegerMode(),            "u", new UncheckedIntegerMode(),            "s", new UncheckedShortMode(),            "l", new UncheckedLongMode()    );    @Override    public Object[][][] tabulate(            String mode, String expression,            int x1, int x2, int y1, int y2, int z1, int z2    ) throws Exception {        NumberMode<?> thisMode = MODES.get(mode);        if (thisMode == null) {            throw new IllegalModeException("Unsupported mode");        }        return getTable(thisMode, expression, x1, x2, y1, y2, z1, z2);    }    private static <T> Object[][][] getTable(            NumberMode<T> thisMode, String expression,            int x1, int x2, int y1, int y2, int z1, int z2    ) {        Object[][][] table = new Object[x2 - x1 + 1][y2 - y1 + 1][z2 - z1 + 1];        GenericExpressionParser<T> parser = new GenericExpressionParser<>(thisMode);        GenericGeneralExpression<T> parsedExpression = parser.parse(expression);        for (int i = x1; i <= x2; i++) {            for (int j = y1; j <= y2; j++) {                for (int k = z1; k <= z2; k++) {                    try {                        table[i - x1][j - y1][k - z1] = parsedExpression.evaluate(                                thisMode.parse(Integer.toString(i)),                                thisMode.parse(Integer.toString(j)),                                thisMode.parse(Integer.toString(k))                        );                    } catch (Exception ignored) {                    }                }            }        }        return table;    }}