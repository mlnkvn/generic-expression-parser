package expression.exceptions;import expression.*;public abstract class UnaryOperations implements All {    protected All expression;    protected boolean hasBrackets;    protected String name;    abstract int operation(int val);    @Override    public int evaluate(int val) {        return operation(expression.evaluate(val));    }    @Override    public int evaluate(int val1, int val2, int val3) {        return operation(expression.evaluate(val1, val2, val3));    }    @Override    public String toString() {        if (hasBrackets || (expression instanceof Const && expression.evaluate(0) == 0)) {            return name + "(" + expression.toString() + ")";        }        return name + expression.toString();    }    @Override    public boolean equals(Object object) {        if (object == null || this.getClass() != object.getClass()) {            return false;        }        CheckedNegate var2 = (CheckedNegate) object;        return expression.equals(var2.expression);    }    @Override    public int hashCode() {        return 17 * expression.hashCode();    }}